// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: notifications.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export enum EmailType {
  /** NODEMAILER - Nodemailer 사용 */
  NODEMAILER = 0,
  /** MAILGUN - Mailgun 사용 */
  MAILGUN = 1,
  UNRECOGNIZED = -1,
}

export interface Empty {
}

export interface NotifyEmailMessage {
  email: string;
  text: string;
  subject: string;
  name: string;
  templatePath: string;
  activationCode: string;
  data: NotifyEmailMessage_Data | undefined;
  emailType: EmailType;
}

export interface NotifyEmailMessage_Data {
  title: string;
  content: string;
}

export interface NotificationsServiceClient {
  notifyEmail(request: NotifyEmailMessage): Observable<Empty>;
}

export interface NotificationsServiceController {
  notifyEmail(request: NotifyEmailMessage): Promise<Empty> | Observable<Empty> | Empty;
}

export function NotificationsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["notifyEmail"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATIONS_SERVICE_NAME = "NotificationsService";
